generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  sentWorkerRequests     WorkerRequest[] @relation("SentRequests")
  receivedWorkerRequests WorkerRequest[] @relation("ReceivedRequests")

  jobsAsWorker  Job[] @relation("JobsAsWorker")
  jobsAsCompany Job[] @relation("JobsAsCompany")

  paymentsMade     Payment[] @relation("Payer")
  paymentsReceived Payment[] @relation("Payee")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model WorkerRequest {
  id         String        @id @default(cuid())
  fromUserId String
  toUserId   String
  status     RequestStatus @default(PENDING)

  fromUser User @relation("SentRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedRequests", fields: [toUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  PAID
}

model Job {
  id          String  @id @default(cuid())
  title       String
  description String?
  agreedPrice Float   @default(0)

  dueDate DateTime?
  status  JobStatus @default(PENDING)

  assignedToId String
  assignedTo   User   @relation("JobsAsWorker", fields: [assignedToId], references: [id], onDelete: Cascade)

  companyId String
  company   User   @relation("JobsAsCompany", fields: [companyId], references: [id], onDelete: Cascade)

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          String  @id @default(cuid())
  discription String?
  amount      Float
  confirmed   Boolean @default(false)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  payerId String
  payer   User   @relation("Payer", fields: [payerId], references: [id], onDelete: Cascade)

  payeeId String
  payee   User   @relation("Payee", fields: [payeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
